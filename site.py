from db import *
# –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ë–î
db = read_db()
els = list(db.keys())

## –°–∞–π—Ç
from dash import Dash, dcc, html, Input, Output,callback
app = Dash(__name__, title="SS14 Tools", update_title=None)


#### –§–û–†–ú–ê–¢ –°–¢–†–ê–ù–ò–¶–´ ####

app.index_string = '''
<!DOCTYPE html>
<html>
<head>
	{%metas%}
	<title>{%title%}</title>
	{%favicon%}
	{%css%}
</head>
<body>



{%app_entry%}
<footer>
	{%config%}
	{%scripts%}
	{%renderer%}
</footer>
</body>
</html>
'''

###### –û–§–û–†–ú–õ–ï–ù–ò–ï #######


# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
def list_form(ll):
	global db

	formatted = []
	imgs = {'medicine': 'üíä',
					'chemicals': 'üß™',
					'botany': 'ü™¥',
					'drinks': 'üç∏'}

	for i in ll:
		if type(i) == int:
			formatted.append(i)
		elif db[i][1] in imgs:
			formatted.append(imgs[db[i][1]] + ' ' + i)
		else:
			formatted.append(i)

	return formatted

# 'background-color': 'rgb(27, 29, 30)', 'color': 'rgb(255,255,255)'

# –¢–∏–ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ
# [
# Div,
# Div
# ]
app.layout = html.Div([

# –°–æ—Ü—Å–µ—Ç–∏ –∏ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ + –Ω–∞–∑–≤–∞–Ω–∏–µ
html.Div([

html.Div([
html.Img(src='assets/favicon.ico', width='50px', height='auto', style={'padding':10}),
html.Div(children='''SS14 Tools'''
, style={'color':'rgb(255,255,255)', 'font-weight': 'bold', 'font-size': '1.5rem'})
], style={'display': 'flex', 'flex-wrap': 'wrap', 'align-items': 'center', 'flex': 1}),

html.Div([
dcc.Link('Discord',href='https://discord.gg/VxHbM3cedQ'),
dcc.Link('Telegram',href='https://t.me/ss14tools')
], style={'display': 'flex', 'flex-wrap': 'wrap', 'align-items': 'center', 'flex': 1}),

#–ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
html.Div(style={'flex':1})

], style={'background-color': '#161819', 'margin': -8, 'display': 'flex', 'flexDirection': 'row', 'justify-content': 'flex-start'}),

# –ù–∞–∑–≤–∞–Ω–∏–µ + –æ–±—ä—ë–º + –≤—ã–≤–æ–¥
html.Div([
# –ù–∞–∑–≤–∞–Ω–∏–µ + –æ–±—ä—ë–º
html.Div([
	# –†–µ–∞–∫—Ü–∏—è
	html.Div([
		dcc.Dropdown(list_form(els), id='reaction', placeholder="–†–µ–∞–∫—Ü–∏—è", maxHeight=500,
		style={'font-size': '120%', 'font-family': 'NotaSans'})
	], style={'flex': 4}),

	# –û–±—ä—ë–º
	html.Div([
		dcc.Dropdown(list_form([30, 50, 100, 300, 1000]), 100, id='amount', clearable=False, searchable=False
			, style={'font-family': '"Source Sans Pro", sans-serif', 'font-size': '120%'}) #, 'background-color': 'rgb(27, 29, 30)'})
	], style={'flex': 1, 'padding-left': 25})

], style={'display': 'flex', 'flexDirection': 'row'}),

	# –í—ã–≤–æ–¥
	html.Div(id='output', style={'text-align': 'center', 'padding-left': '15%', 'padding-right': '15%'})

], style={'padding': '5%', 'margin-left': '30%', 'margin-right': '30%'})

])
# vh - –≤—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞, vw - —à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞
#
# 'background-color': '#242829',
# padding - –æ—Ç—Å—Ç—É–ø
#    [#####]
# margin - —Å—É–∂–µ–Ω–∏–µ
#     [###]
#########################





####### –õ–û–ì–ò–ö–ê ##########

from calc import *

@callback(
	Output('output', 'children'),
	Input('reaction', 'value'),
	Input('amount', 'value')
)
def update_output(reaction, amount):
	if reaction:
		reaction = reaction[2:]
		comps, res = calc(reaction, amount, main = True)

		# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è HTML
		result = []
		for i in comps:
			result.append( html.Div(i + ': ' + str(comps[i])
, style={'background-color': 'rgb(213, 193, 86)', 'color': '#ffffff', 'margin-top': 10, 'border-radius': 10, 'padding': 15, 'font-family': '"Source Sans Pro", sans-serif', 'font-size': '120%'}) )

		# –í—ã—Ö–æ–¥–Ω–æ–µ –≤–µ—â–µ—Å—Ç–≤–æ
		result.append( html.Div(f'{reaction}: {res}'
, style={'background-color': 'rgb(61, 164, 113)', 'color': '#ffffff', 'margin-top': 10, 'border-radius': 10, 'padding': 15, 'font-family': '"Source Sans Pro", sans-serif', 'font-size': '120%'}) )


		return result


#########################



if __name__ == '__main__':
#	app.run(debug=True)
	app.run(debug=False)
